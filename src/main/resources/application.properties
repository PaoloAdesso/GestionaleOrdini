# =============================================================================
# CONFIGURAZIONE APPLICAZIONE SPRING BOOT - GESTIONE ORDINI
# =============================================================================

# Nome dell'applicazione che apparirà nei log e nelle metriche
spring.application.name=GestioneOrdini

# =============================================================================
# CONFIGURAZIONE SERVER WEB
# =============================================================================

# Porta su cui avviare il server Tomcat (porta di default 8080)
# Swagger sarà disponibile su: http://localhost:8080/swagger-ui/index.html
# server.port=8080 (commentato perché 8080 è la porta di default)

# =============================================================================
# CONFIGURAZIONE DATABASE POSTGRESQL
# =============================================================================

# URL di connessione al database PostgreSQL
# localhost:5432 = server locale sulla porta standard PostgreSQL
# bar = nome del database condiviso con GestioneTavoli
spring.datasource.url=jdbc:postgresql://localhost:5432/bar

# Credenziali di accesso al database
spring.datasource.username=postgres
spring.datasource.password=admin

# Driver JDBC per PostgreSQL (richiesto per la connessione)
spring.datasource.driver-class-name=org.postgresql.Driver

# Schema del database (commentato perché usiamo quello di default "public")
#spring.datasource.hikari.schema=public

# =============================================================================
# CONFIGURAZIONE JPA/HIBERNATE
# =============================================================================

# NON permette ad Hibernate di creare/modificare le tabelle automaticamente
# Le migrazioni sono gestite da Flyway, non da Hibernate
spring.jpa.hibernate.ddl-auto=none

# Mantiene aperta la sessione JPA durante la view (facilita lazy loading)
# Utile per evitare LazyInitializationException nei controller
spring.jpa.open-in-view=true

# =============================================================================
# CONFIGURAZIONE FLYWAY (MIGRAZIONI DATABASE)
# =============================================================================

# Abilita Flyway per la gestione delle migrazioni del database
spring.flyway.enabled=true

# Cartella dove si trovano i file di migrazione SQL
# I file devono essere nella cartella src/main/resources/db/migration/
spring.flyway.locations=classpath:db/migration

# Permette a Flyway di creare la baseline automaticamente se il database
# ha già dati (necessario per il primo progetto che inizializza il DB)
spring.flyway.baseline-on-migrate=true